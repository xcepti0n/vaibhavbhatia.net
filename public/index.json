[{"content":"Welcome to my website #I am working on a couple of stuff related to my selfhosted server. I am using this website to capture all my learnings/projects in detail in Blog section.\nThanks for checking out my site, see you around :).\n","date":null,"permalink":"/","section":"","summary":"Welcome to my website #I am working on a couple of stuff related to my selfhosted server.","title":""},{"content":"","date":null,"permalink":"/tags/cloudflare/","section":"Tags","summary":"","title":"cloudflare"},{"content":"","date":null,"permalink":"/tags/https/","section":"Tags","summary":"","title":"https"},{"content":"","date":null,"permalink":"/tags/nginx/","section":"Tags","summary":"","title":"nginx"},{"content":"","date":null,"permalink":"/tags/server/","section":"Tags","summary":"","title":"server"},{"content":"This article explains how to host a plain website using nginx server on https locally on Debian 12.\nSetting up plain index.html on https locally. #We will be using nginx server in this article, for locally hosting a simple webpage.\nSetting up nginx server. #Below are Debian commands, if you are using other OS or BSD, check official installaton link: https://www.nginx.com/resources/wiki/start/topics/tutorials/install/\nUpdate apt package indexes : sudo apt update Install nginx : sudo apt install nginx -y Confirm that nginx is running using systemctl status nginx Checkout the server at http://\u0026lt;your-server-ip\u0026gt; Hosting custom index.html locallly #In this step we will change the default page to a custom index.html.\nDisable default configuration unlink /etc/nginx/sites-enabled/default Create a new configuration vi /etc/nginx/sites-available/\u0026lt;your-domain.com\u0026gt;. You can use any name but using a domain name is preferred as it is easy to remember and also tells what the configuration is for. Paste the below configuration with updated domain name. server { listen 80; listen [::]:80; server_name your_domain.com; root /var/www/your_domain.com; index index.html; location / { try_files $uri $uri/ =404; } } Enable your configuration ln -s /etc/nginx/sites-available/\u0026lt;your-domain.com\u0026gt; /etc/nginx/sites-enabled/ As you might have guessed all sites configuration are available here /etc/nginx/sites-available/ and when one wants to enable, their sym links can be added here:/etc/nginx/sites-enabled/ Check the configuration if its valid nginx -t Restart ngninx to use the updated configuration systemctl restart nginx Now lets add index.html file in the right path (check root path in above configuration).\nCreate the directory: mkdir /var/www/your_domain.com Create new index.html: vi /var/www/example.com/index.html Check your localhost, your index.html are now being shown. Creating certificates #As I have hosted on cloudflare, I created certificates on cloudflare. You can either use your domain provider or use LetsEncrypt for creating self signed certificates.\nCreate folder for storing certificate and key mkdir /etc/nginx/certs/\u0026lt;your-domain.com\u0026gt; Using cloudflare\nOpen cloudflare dashboard Click on your domain. Go to SSL/TLS \u0026gt; Client certificates. Click on Create Certificate Keep default values and click Create button. Copy the certificate and paste to file vi /etc/nginx/certs/\u0026lt;your-domain.com\u0026gt;/certificate.pem Copy the private key and paste to file vi /etc/nginx/certs/\u0026lt;your-domain.com\u0026gt;/key.pem Click OK on cloudlfare dashboard to go back to Client Certificate, you should be able to confirm on dashboard that a new Certificate is now being shown as ACTIVE Lets modify the configuration file to use these certificates. 9. Open the configuration file vi /etc/nginx/sites-enabled/\u0026lt;your-domain.com\u0026gt; 10. Update the configuration to look like this ``` server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name \u0026lt;your-domain.com\u0026gt;; ssl_certificate certs/\u0026lt;your-domain.com\u0026gt;/certificate.pem; ssl_certificate_key certs/\u0026lt;your-domain.com\u0026gt;/key.pem;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; root /var/www/\u0026lt;your-domain.com\u0026gt;; index index.html; location / { try_files $uri $uri/ =404; } } ``` Restart the nginx server systemctl restart nginx Now your webpage will be up and running on https::// Resources: #https://nginx.org/en/docs/beginners_guide.html https://utho.com/docs/tutorial/how-to-install-nginx-web-server-on-debian-12/ https://nginx.org/en/docs/http/configuring_https_servers.html\n","date":"2 January 2024","permalink":"/posts/this-website-setup/server-and-certs/","section":"Blog","summary":"This article explains how to host a plain website using nginx server on https locally on Debian 12.","title":"Setup HTTPS server using NGINX"},{"content":"These are the collection of tags, that I have used throught my blog. Use these to jump directly to related articles.\n","date":null,"permalink":"/tags/","section":"Tags","summary":"These are the collection of tags, that I have used throught my blog.","title":"Tags"},{"content":"I am Software Development Engineer for around 5 years. I have tried my hands on vast variety of this in this industry including MicroServices, containers, Rest APIs, also worked on device side of this worked IPCs, microcontrollers( BLE, bootloader) and last but not least, differential privacy.\nI try my hands on code off-work as well. I recently, just a year back, setup a selfhosted server for hosting my website, storage and more. I learned quite a lot from that. I plan to use this website to write articles about my learning. This way I am storing my learning somewhere which might also be helpful for anyone visiting my site.\nOther than coding/development, I have a couple of hobbies.\nGaming: As expected from a software developer right?. I am currently playing Rocket league, grinding to become a champ. (Diamond 3 right now, just one step to go)\nParkour: I loved parkour as soon as I got to know about it. I might be around 10, when I first saw someone on TV, channel was National Geography or Discovery I think. I saw people doing flips (that was the only word I know at that time), and I was hooked. I started doing it on my own, starting with precision jumps (pre\u0026rsquo;s as we call it), high jumps and basic pakour rolls and valts.\nAchievement 1: I have done a backflip on concrete. Achievement 2: I have done front flip on sand. Achievement 3: I have done 10 ft. precision jumps. Achievement 4: I have done muscle up. Sketching: I used to sketch back in college, when I had quite some time. I have couple of realistic pencil sketching for my family and friends.\nDance: I was part of a dance crew back in College. Now, I don\u0026rsquo;t do it very often, so I can only do some basic stuff in bboying, popping, isolations and couple of well known moves like moon walk.\nI usually go with my life with this one quote.\nDo your best so you don\u0026rsquo;t regret.\nHopefully it inspires you as well :).\nDo not hesitate to contact me if you have any questions/inquiries or just want to talk.\n","date":"2 January 2024","permalink":"/about/","section":"","summary":"I am Software Development Engineer for around 5 years.","title":"About"},{"content":"Welcome to my blog.\n","date":null,"permalink":"/posts/","section":"Blog","summary":"Welcome to my blog.","title":"Blog"},{"content":"","date":null,"permalink":"/tags/cloudflare-tunnel/","section":"Tags","summary":"","title":"cloudflare tunnel"},{"content":"","date":null,"permalink":"/tags/cloudflared/","section":"Tags","summary":"","title":"cloudflared"},{"content":"Here is a step by step guide to help you host your own first website.\nTo host your own website you will need # A domain (eg - \u0026lt;your name\u0026gt;.com), if you want to host publically. If you don\u0026rsquo;t have it already you can get one by following this guide. Cloudflare is one of Domain pprovider, you can choose your favorite domain provider. A server - It can be a docker container on your own Laptop, a mini PC running proxmox or a server running on linode or any other server providers.. You can use Debian, Ubuntu or any other OS of your choice. (Articles below considers you have Debian 12) You will learn as you go through the articles, as I did when I followed the process of setting up this website.\nIt is recommended to follow this order if you have no initial setup\nSetup HTTPS server using NGINX -\u0026gt; Host your website using Cloudflare tunnel -\u0026gt; Make website using Hugo\n","date":null,"permalink":"/posts/this-website-setup/","section":"Blog","summary":"Here is a step by step guide to help you host your own first website.","title":"Create and host your own website using nginx, cloudflare and Hugo"},{"content":"This article tells about how to host a website publically using cloudflare tunnel, that is running on localhost.\nHosting on Cloudflare #I am assuming you have already setup the cloudflare account with your domain.\nCreating a tunnel #Lets create a cloudflared tunnel.\nReferences: Creating tunnel: https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/get-started/ Creating tunnel using dashboard (managed-remotely): https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/get-started/create-remote-tunnel/\nYou should follow above guides as they are kept up to date by Cloudflare, mine can be old depending on when you checking it.\nSteps to create a cloudflared tunnel:\nGo to Zero Trust Select your account. Go to Access \u0026gt; Tunnels. Click on [+ Create a tunnel]. Write the name of the tunnel. Don\u0026rsquo;t worry about name, you can rename it afterwards. Click on Save tunnel. You will be now in Install and run Connectors section. Choose your Operating system. Run the command provided where your server is hosted. Now cloudflared should be running locally. (Confirm using systemctl status cloudflared) It should also show on the dashboard that you have a connector connected. Now you have tunnel running but it does not know which ip or port to forward the tunnel request to and when to forward.\nOn dashboard now you will be on Public Hostnames section, which means the traffic routed from publuc domain to your tunnel. Under **Add public Domain for you will see below sections. (Fill unless optional) Subdomain - Fill www or subdomain of your website for which which you want the traffic to be routed. Domain - Choose your domain from the drop down menu. Path (optional) - you can leave it blank. Type - Choose https, as we have hosted our server locally on https. URL - You can write localhost: if your cloudflare is running on the same server. Or write the local IP address of your server Eg. 192.168.0.121 (you can skip if it is on default port like 443 for https.) ","date":"2 January 2024","permalink":"/posts/this-website-setup/hosting/","section":"Blog","summary":"This article tells about how to host a website publically using cloudflare tunnel, that is running on localhost.","title":"Host your website using Cloudflare tunnel"},{"content":"","date":null,"permalink":"/tags/hosting/","section":"Tags","summary":"","title":"hosting"},{"content":"","date":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"hugo"},{"content":"This article will explain how to use hugo to create your own website with awesome templates.\nInstalling Hugo and initial setup #Now that you have your wesbite server up and running with a webpage, lets make the website awesome.\nResources and steps to setup your website. # Install Hugo Install Git (if you don\u0026rsquo;t have it installed.) Install Powershell if you are a windows user. NOTE: PowerShell and Windows PowerShell are different applications. Run command hugo version on Powershell terminal to confirm that hugo is working. Alternative 1: Using this website git repository as base\nI will only recommend this if you are new all commands and stuff. If you know a bit about it checkout alterative 2 below.\nFork my repo from git: https://github.com/xcepti0n/vaibhavbhatia.net/ Choose name of your repo to your domain or something of your liking. Use git clone \u0026lt;your-repository-link.git\u0026gt; to clone your repository locally. Change your current directory cd \u0026lt;your-repo-name\u0026gt; Run git pull --recurse-submodules to pull congo submodule. Run hugo server to start the server. Checkout website on localhost:1313. (Also logged in output of above command). Make changes locally and it should be reflected in the webpage instantly. Checkout congo guide to know what each configuration does and how things are managed. All config files are in config/_defaults folder for you to tinker with. Alternative 2: Using Hugo guide\nFollow the quick start guide to setup initial package: https://gohugo.io/getting-started/quick-start/ To use congo theme, follow https://jpanther.github.io/congo/docs/installation/, it has easy setup guide, including what needs to be done on Hugo. For other themes checkout Hugo Themes\nSyncing the updated pages to your server. #There are multiple way to do it. Lets see what I did, and then discuss the alternatives.\nWhat I did for syncing website to server # Ran command hugo locally to generate static website in dev environment. (i.e. my machine). Used git to commit the public folder as well which contains the static generated website. Installed git on server using sudo apt-get install git-all. For other OS checkout https://github.com/git-guides/install-git Ran command git clone \u0026lt;my-repo-link\u0026gt;.git to clone the repo on the server. Copy the contents on public folder to the path where nginx is referring from, using cp -r ./public/ /var/www/\u0026lt;your folder\u0026gt;/ Restart nginx - systemctl restart nginx. Checkout your webpage and see the updated website. FAQ\nQ: Why did you not installed hugo locally on server and generate website on server itself?\nI did this first but, it was causing issues to generate HTML files, due to some layout folder issue. I choose to do the above, to avoid spending time on debugging (I am lazy sometimes). Other options on upload website to server (other than git) #These are other options to upload your website to your server but are not recommended as are not scalable.\nCreate basic python server locally and host your folder which has the website. Use curl or Wget to download the folder on the server if you have local server. Use flash drive to transfer website.. Use google drive and open the folder to public, and use its link to download on your server. Recommended if you are using static website host providers like AWS S3\nIf you are using AWS S3 to host your static website, viola. Just upload your website and done. Automating the sync #I have not automated it yet, as I haven\u0026rsquo;t got the time to do it but if you want to do it, here are the steps.\nWrite a basic bash script to do: (psuedo code below) `git fetch`: Fetches the new commit if there is one. // Check if there are new commits to be pulled. // Can be done by substring matching on `git fetch` output, // or explore git to see if there are other alterative If new commit: // Pull the commit run `git pull --rebase` // Copy the static website tonginx server preferred location. cp -r ./public/ /var/www/\u0026lt;yourfolder\u0026gt;/ // Restart server systemctl restart nginx Else: Do nothing Make the cron job from this bash script to run once a day or as per your need and you are good to go. I have not setup the script yet, as I prefer to do it manually as I am already running commands to push the changes to git. (I agree I am lazy\u0026hellip;)\nLearnings and resources # Powershell and Windows Powershell are different (Whaattt? - exactly my reaction) Install here - https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4 Take - Powershell is way better than windows powershell.\nInstalling hugo on windows: https://gohugo.io/installation/windows/ I used chocolatey: https://gohugo.io/installation/windows/#chocolatey\nMarkdown is used throughout Hugo to create your website so here is the basic syntax on how to use it.\nHugo generated static website does not work properly (HTML was not being generated) if you just open the file without the server. Solution: https://discourse.gohugo.io/t/site-looks-fine-on-localhost-and-github-pages-but-not-when-rendering-to-public/35825/2\nor just commit your public folder as well, just like I did.\nI hope it helped, thanks for reading!\n","date":"2 January 2024","permalink":"/posts/this-website-setup/user-interface/","section":"Blog","summary":"This article will explain how to use hugo to create your own website with awesome templates.","title":"Make website using Hugo"},{"content":"","date":null,"permalink":"/tags/ui/","section":"Tags","summary":"","title":"ui"},{"content":"","date":null,"permalink":"/tags/website/","section":"Tags","summary":"","title":"website"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]